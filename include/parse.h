// vim: noet ts=4 sw=4
#pragma once
/** @file */

/**
 * @brief	Simple string type.
 */
typedef struct _str {
	const size_t size; /**	The size of the string, in bytes. */
	const char *data; /**	The actual string content. */
} _str;

/**
 * @brief	This is a representation of a token use for parsing into the AST later.
 */
typedef struct _lair_token {
	char *token; /**	The string representation of the token. Is probably NUL-terminated. */
	struct _lair_token *next; /**	Link to the next token in the list. */
} _lair_token;

typedef struct _lair_ast {
	struct _lair_ast *next;
	struct _lair_ast *children;
} _lair_ast;

/**
 * Parses a raw program (string) into tokens.
 * @param[in]	program	The program to be parsed.
 * @param[in]	len	The length of the program, in bytes.
 */
_lair_token *_lair_tokenize(const char *program, const size_t len);

/**
 * Frees the tokens generated by `_lair_tokenize`.
 * @param[in]	tokens	The tokens generated by `_lair_tokenize`.
 */
void _lair_free_tokens(_lair_token *tokens);
const _lair_ast *_lair_parse_from_tokens(const _lair_token *tokens);
